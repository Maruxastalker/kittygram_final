name: Kittygram CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: django_kittygram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    # Бэкенд: проверка PEP8 и тесты
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8==6.0.0 flake8-isort==6.0.0
        cd backend && pip install -r requirements.txt

    - name: Lint with flake8
      run: python -m flake8 backend/

    - name: Run backend tests
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: mysecretpassword
        POSTGRES_DB: django_kittygram
        DB_HOST: localhost
        DB_PORT: 5432
      run: |
        cd backend && python manage.py test

    # Фронтенд: тесты
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16.x

    - name: Install frontend dependencies
      run: |
        cd frontend && npm install

    - name: Run frontend tests
      run: |
        cd frontend && npm test

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: lint_and_test
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    # Логин в Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    # Сборка и публикация образов
    - name: Build and push backend image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_backend:latest ./backend
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_backend:latest

    - name: Build and push frontend image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_frontend:latest ./frontend
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_frontend:latest

    - name: Build and push gateway image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_gateway:latest ./nginx
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_images
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    # Копирование docker-compose на сервер
    - name: Copy docker-compose to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "kittygram_final"

    # Деплой на сервер
    - name: SSH and deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd kittygram_final
          # Установка Docker Compose если нужно
          if ! command -v docker-compose &> /dev/null; then
            sudo apt update
            sudo apt install -y docker-compose-plugin
          fi
          # Запуск контейнеров
          sudo docker compose -f docker-compose.production.yml pull
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          # Миграции и статика
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate --no-input
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send Telegram message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой kittygram успешно выполнен!