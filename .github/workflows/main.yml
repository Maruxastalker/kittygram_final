name: Kittygram CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: django_kittygram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    # Бэкенд: проверка PEP8 и тесты
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8==6.0.0 flake8-isort==6.0.0
        cd backend && pip install -r requirements.txt
    - name: Lint with flake8
      run: python -m flake8 backend/

    - name: Run backend tests
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: mysecretpassword
        POSTGRES_DB: django_kittygram
        DB_HOST: localhost
        DB_PORT: 5432
      run: |
        cd backend && python manage.py test
    # Фронтенд: тесты
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16.x

    - name: Install frontend dependencies
      run: |
        cd frontend && npm install
    - name: Run frontend tests
      run: |
        cd frontend && npm test
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: lint_and_test
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    # Логин в Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    # Сборка и публикация образов
    - name: Build and push backend image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_backend:latest ./backend
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_backend:latest
    - name: Build and push frontend image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_frontend:latest ./frontend
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_frontend:latest
    - name: Build and push gateway image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_gateway:latest ./nginx
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_gateway:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_images
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Test SSH connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            echo "✅ SSH connection successful!"
            mkdir -p kittygram_final
            ls -la

      - name: Create docker-compose.production.yml on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cat > kittygram_final/docker-compose.production.yml << 'EOF'
            version: '3.8'

            volumes:
              pg_data:
              static:
              media:

            services:
              db:
                image: postgres:13
                env_file: .env
                restart: always
                volumes:
                  - pg_data:/var/lib/postgresql/data

              backend:
                image: markuser4556/kittygram_backend:latest
                env_file: .env
                restart: always
                volumes:
                  - static:/backend_static
                  - media:/app/media
                depends_on:
                  - db

              frontend:
                image: markuser4556/kittygram_frontend:latest
                env_file: .env
                restart: always
                volumes:
                  - static:/static
                depends_on:
                  - backend

              gateway:
                image: markuser4556/kittygram_gateway:latest
                env_file: .env
                restart: always
                ports:
                  - 9000:80
                volumes:
                  - static:/staticfiles/
                  - media:/media
                depends_on:
                  - backend
                  - frontend
            EOF
            echo "✅ docker-compose.production.yml created successfully!"

      - name: Create .env file on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cat > kittygram_final/.env << 'EOF'
            POSTGRES_DB=django
            POSTGRES_USER=django_user
            POSTGRES_PASSWORD=mysecretpassword
            DB_HOST=db
            DB_PORT=5432
            DJANGO_SECRET_KEY=django-insecure-cg6-6d51ef8f-4-r3-vmxm4-abgjw8mo-4y-q-uq1-4-89
            DJANGO_DEBUG=True
            DJANGO_ALLOWED_HOSTS = 84.201.136.206,localhost,127.0.0.1,backend,kittygran.myftp.org
            EOF
            echo "✅ .env file created successfully!"

      - name: Deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd kittygram_final
            echo "Pulling latest images..."
            sudo docker compose -f docker-compose.production.yml pull
            echo "Stopping existing containers..."
            sudo docker compose -f docker-compose.production.yml down
            echo "Starting new containers..."
            sudo docker compose -f docker-compose.production.yml up -d
            echo "Waiting for backend to start..."
            sleep 20
            echo "Running migrations..."
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate --no-input
            echo "Collecting static files..."
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
            echo "✅ Deployment completed successfully!"
            echo "Checking containers status..."
            sudo docker compose -f docker-compose.production.yml ps