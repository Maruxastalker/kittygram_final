name: Kittygram CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  backend_tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: django_kittygram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8==6.0.0
        cd backend && pip install -r requirements.txt

    - name: Lint with flake8
      run: python -m flake8 backend/

    - name: Run backend tests
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: mysecretpassword
        POSTGRES_DB: django_kittygram
        DB_HOST: localhost
        DB_PORT: 5432
      run: |
        cd backend && python manage.py test

  frontend_tests:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16.x

    - name: Install frontend dependencies
      run: |
        cd frontend && npm ci

    - name: Run frontend tests
      run: |
        cd frontend && npm test -- --watchAll=false

  build_and_push:
    runs-on: ubuntu-latest
    needs: [backend_tests, frontend_tests]
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Build and push backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend/
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_backend:latest

    - name: Build and push frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend/
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_frontend:latest

    - name: Build and push gateway
      uses: docker/build-push-action@v4
      with:
        context: ./nginx/
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Ensure target directory exists
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          mkdir -p /home/${{ secrets.SSH_USERNAME }}/kittygram_final/
          chmod 755 /home/${{ secrets.SSH_USERNAME }}/kittygram_final/

    - name: Copy docker-compose to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "docker-compose.production.yml"
        target: "/home/${{ secrets.SSH_USERNAME }}/kittygram_final/"

    - name: Deploy application
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /home/${{ secrets.SSH_USERNAME }}/kittygram_final/
          # Деплой
          docker compose -f docker-compose.production.yml pull
          docker compose -f docker-compose.production.yml down
          docker compose -f docker-compose.production.yml up -d
          # Миграции и статика
          sleep 10
          docker compose -f docker-compose.production.yml exec backend python manage.py migrate --no-input
          docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input